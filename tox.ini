# Note: while tox currently supports config in pyproject.toml, for now it only support ini-style config passed
# as a big multi-line string value (under the key "tool.tox.legacy_tox_ini"). It is currently cleaner to keep the
# tox.ini file until tox support a proper toml-based configuration

[tox]
# See:
#   - https://docs.djangoproject.com/en/2.2/faq/install/#what-python-version-can-i-use-with-django
#   - https://docs.djangoproject.com/en/3.2/faq/install/#what-python-version-can-i-use-with-django
#   - https://docs.djangoproject.com/en/4.0/faq/install/#what-python-version-can-i-use-with-django
envlist=
  django21-py{35,36,37}
  django22-py{35,36,37,38,39}
  django{30,31,32}-py{36,37,38,39}
  django40-py{38,39}
  black
  pylint
  mypy
  flake8

isolated_build = true
skip_missing_interpreters = true
skipsdist = true
skip_install = false

[testenv]
allowlist_externals = poetry
                      sed
deps =
    django21: Django==2.1.*
    django22: Django==2.2.*
    django30: Django==3.0.*
    django31: Django==3.1.*
    django32: Django==3.2.*
    django40: Django==4.0.*
# A future release of Poetry (probably 1.2) will bring some features that may help to run tox correctly,
# without requiring such hacks to get correct django version and all project dependencies installed.
commands =
    poetry export --without-hashes --dev -o {env:TOX_ENV_DIR}/req.txt
    sed -i -E 's/^[Dd]jango==.+$//g' {env:TOX_ENV_DIR}/req.txt
    pip install -r {env:TOX_ENV_DIR}/req.txt
    django-admin --version
    pytest {posargs}

[testenv:black]
deps = black
commands = black .

[testenv:flake8]
deps = flake8
commands = flake8 .

[testenv:mypy]
deps =
  mypy
  types-docutils
  types-Markdown
  django-stubs
  types-requests
commands = mypy modernrpc

[testenv:pylint]
deps = pylint
commands = pylint --exit-zero modernrpc
